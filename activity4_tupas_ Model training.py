# -*- coding: utf-8 -*-
"""Activity4_Tupas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i_6H3wsfVY-SW66703VYrWXNwFPtOHhk

# **1. Data Pre-Processing**
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

file_id = '1TXn8MXumYwfekN2J2tYRB4jjBKjYtjbb'
link = f'https://drive.google.com/uc?id={file_id}'
data = pd.read_csv(link)
data

sns.lmplot(x='R&D Spend', y='Profit', data=data)
sns.lmplot(x='Administration', y='Profit', data=data)
sns.lmplot(x='Marketing Spend', y='Profit', data=data)

from sklearn.impute import SimpleImputer

n_impute = SimpleImputer(missing_values= np.nan, strategy = 'mean')
c_impute = SimpleImputer(missing_values= np.nan, strategy = 'most_frequent')

data[['R&D Spend', 'Administration']] = n_impute.fit_transform(data[['R&D Spend', 'Administration']])
data[['State']] = c_impute.fit_transform(data[['State']])

data

#I extract the independent variables (features) by selecting all rows and all columns except the last one
x = data.iloc[:, :-2].values

#I extract the dependent variable (target) by selecting all rows and only the last column
y = data.iloc[:, -1].values

#I print the independent and dependent variables
print("Independent Variable:\n", x)
print("Dependent Variable:\n", y)

'''one_hot = OneHotEncoder()
transformer = ColumnTransformer(transformers=[("encoder", one_hot, [3])], remainder='passthrough')

x = np.array(transformer.fit_transform(x))'''

#x=(x[:, [4,5,6]])
x

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2,random_state= 1)
print("TRAINING RESULT:\n",x_train)
print("TESTING RESULT:\n",x_test)

"""# 2. Create a multiple linear regression model to predict the profit."""

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(x_train, y_train)

regressor.score(x_test,y_test)*100

predicted = regressor.predict(x_test)

dataf = {'Predicted': predicted, 'Actual': y_test}
pd.DataFrame(dataf)

import pickle

print("Mean sq. errror between y_test and predicted =", np.mean(predicted-y_test)**2)

pickle.dump(regressor, open('model.pkl', 'wb'))

model = pickle.load(open('model.pkl','rb'))

from sklearn.metrics import r2_score
r_sq = r2_score(predicted, y_test)
print(r_sq)

print(model.predict([[165349.20, 136897.80, 471784.10]]))